"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[996],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),h=o,u=m["".concat(p,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5455:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>h,default:()=>g,frontMatter:()=>m,metadata:()=>u,toc:()=>k});var a=n(5318),o=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(s)for(var n of s(t))l.call(t,n)&&c(e,n,t[n]);return e};const m={id:"chapter_five",title:"Chapter 5 - Events",description:"This chapter covers various events that can make your app more interactive."},h=void 0,u={unversionedId:"chapter_five",id:"chapter_five",title:"Chapter 5 - Events",description:"This chapter covers various events that can make your app more interactive.",source:"@site/../docs/chp5.md",sourceDirName:".",slug:"/chapter_five",permalink:"/app_adventure/docs/chapter_five",draft:!1,tags:[],version:"current",lastUpdatedAt:1681183291,formattedLastUpdatedAt:"Apr 11, 2023",frontMatter:{id:"chapter_five",title:"Chapter 5 - Events",description:"This chapter covers various events that can make your app more interactive."},sidebar:"defaultSidebar",previous:{title:"Chapter 4 - Layout",permalink:"/app_adventure/docs/chapter_four"},next:{title:"Chapter 6 - UFO Game",permalink:"/app_adventure/docs/chapter_six"}},C={},k=[{value:"Time",id:"time",level:2},{value:"React <strong><em>Animated Timing</em></strong>",id:"react-animated-timing",level:3},{value:"Interval",id:"interval",level:3},{value:"Gesture",id:"gesture",level:2},{value:"<code>useRef</code> hook",id:"useref-hook",level:4},{value:"Class Component",id:"class-component",level:3},{value:"Objective-oriented programming",id:"objective-oriented-programming",level:2},{value:"Class Properties",id:"class-properties",level:4},{value:"Exercise",id:"exercise",level:2}],f={toc:k};function g(e){var t,o=e,{components:c}=o,m=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&s)for(var a of s(e))t.indexOf(a)<0&&l.call(e,a)&&(n[a]=e[a]);return n})(o,["components"]);return(0,a.kt)("wrapper",(t=d(d({},f),m),r(t,i({components:c,mdxType:"MDXLayout"}))),(0,a.kt)("div",{className:"content-banner"},(0,a.kt)("p",null,"This chapter covers various events that can make your app more interactive. You will learn how to use timers and other time-related tools to make your app more interactive. You will also be introduced to the concept of object-oriented programming, which is a powerful way to organize your code."),(0,a.kt)("img",{className:"content-banner-img",src:"/docs/assets/p_android-ios-devices.svg",alt:" "})),(0,a.kt)("h2",d({},{id:"time"}),"Time"),(0,a.kt)("p",null,"In programming, time is a way to measure how long it takes for things to happen. It's like a clock that keeps track of how much time has passed since a certain event."),(0,a.kt)("p",null,"In app development, time is important because many apps need to perform actions at certain times or intervals. For example, a weather app might need to update the forecast every hour, or a game might need to check if the player has completed a task after a certain amount of time has passed."),(0,a.kt)("p",null,"Developers use timers to make sure that events happen at the right time. A timer is like a stopwatch that can be set to go off after a certain amount of time has passed."),(0,a.kt)("p",null,"Using time and timers properly in app development helps make sure that everything happens at the right time and in the right order. This makes apps more reliable and useful for users."),(0,a.kt)("h3",d({},{id:"react-animated-timing"}),"React ",(0,a.kt)("strong",{parentName:"h3"},(0,a.kt)("em",{parentName:"strong"},"Animated Timing"))),(0,a.kt)("p",null,"React's Animated library is a tool for creating animations and other types of interactions with React components. It is a powerful tool that can be used to create complex animations and interactions."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Animated.timing")," allows you to change the properties of a component over time, creating smooth and engaging animations. ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.timing")," works by specifying the starting and ending values for a property of a component, and the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"duration"))," over which the animation should take place. The tool then automatically calculates and updates the values of that property over time, resulting in a smooth transition between the starting and ending values."),(0,a.kt)("p",null,"For example, if you wanted to create an animation that moves a component from one position on the screen to another, you could use Animated.timing to change the component's position property over a specified ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"duration")),". As the animation plays, the component's position would gradually change, resulting in a smooth, visually appealing effect."),(0,a.kt)("p",null,"In the example below, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"animated.timing")," to create an animation that fades a component in and out over a duration of 1 second. The component's opacity property is set to 0 at the start of the animation, and 1 at the end. As the animation plays, the component's opacity gradually changes from 0 to 1, resulting in a smooth fade-in effect."),(0,a.kt)("p",null,"You might notice that we create a new kind of ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),", called ",(0,a.kt)("inlineCode",{parentName:"p"},"FadeInView"),". This is a custom component that we created to make it easier to create animations with ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.timing"),". Let's take a closer look at this line, ",(0,a.kt)("inlineCode",{parentName:"p"},"const FadeInView: React.FC<FadeInViewProps> = props =>"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"FadeInView: React.FC<FadeInViewProps>")," part is called a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"type declaration")),".\nIn this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"const FadeInView")," declares a new constant variable named ",(0,a.kt)("inlineCode",{parentName:"p"},"FadeInView"),", which is assigned the value of the function definition that follows it. It specifies that the ",(0,a.kt)("inlineCode",{parentName:"p"},"FadeInView")," component is a function component that receives props of type ",(0,a.kt)("inlineCode",{parentName:"p"},"FadeInViewProps"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"React.FC"),' stands for "React function component".'),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"props => part")," is the function's parameter list. It specifies that the component function accepts a single parameter called props."),(0,a.kt)("div",d({},{className:"snack-player","data-snack-name":"AnimatedTiming","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%2C%20%7BuseRef%2C%20useEffect%7D%20from%20'react'%3B%5Cnimport%20%7BAnimated%2C%20Text%2C%20View%7D%20from%20'react-native'%3B%5Cnimport%20type%20%7BPropsWithChildren%7D%20from%20'react'%3B%5Cnimport%20type%20%7BViewStyle%7D%20from%20'react-native'%3B%5Cn%5Cntype%20FadeInViewProps%20%3D%20PropsWithChildren%3C%7Bstyle%3A%20ViewStyle%7D%3E%3B%5Cn%5Cnconst%20FadeInView%3A%20React.FC%3CFadeInViewProps%3E%20%3D%20props%20%3D%3E%20%7B%5Cn%20%20const%20fadeAnim%20%3D%20useRef(new%20Animated.Value(0)).current%3B%20%2F%2F%20Initial%20value%20for%20opacity%3A%200%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20Animated.timing(fadeAnim%2C%20%7B%5Cn%20%20%20%20%20%20toValue%3A%201%2C%5Cn%20%20%20%20%20%20duration%3A%2010000%2C%5Cn%20%20%20%20%20%20useNativeDriver%3A%20true%2C%5Cn%20%20%20%20%7D).start()%3B%5Cn%20%20%7D%2C%20%5BfadeAnim%5D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3CAnimated.View%20%2F%2F%20Special%20animatable%20View%5Cn%20%20%20%20%20%20style%3D%7B%7B%5Cn%20%20%20%20%20%20%20%20...props.style%2C%5Cn%20%20%20%20%20%20%20%20opacity%3A%20fadeAnim%2C%20%2F%2F%20Bind%20opacity%20to%20animated%20value%5Cn%20%20%20%20%20%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.children%7D%5Cn%20%20%20%20%3C%2FAnimated.View%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%20You%20can%20then%20use%20your%20%60FadeInView%60%20in%20place%20of%20a%20%60View%60%20in%20your%20components%3A%5Cnexport%20default%20()%20%3D%3E%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CView%5Cn%20%20%20%20%20%20style%3D%7B%7B%5Cn%20%20%20%20%20%20%20%20flex%3A%201%2C%5Cn%20%20%20%20%20%20%20%20alignItems%3A%20'center'%2C%5Cn%20%20%20%20%20%20%20%20justifyContent%3A%20'center'%2C%5Cn%20%20%20%20%20%20%7D%7D%3E%5Cn%20%20%20%20%20%20%3CFadeInView%5Cn%20%20%20%20%20%20%20%20style%3D%7B%7B%5Cn%20%20%20%20%20%20%20%20%20%20width%3A%20250%2C%5Cn%20%20%20%20%20%20%20%20%20%20height%3A%2050%2C%5Cn%20%20%20%20%20%20%20%20%20%20backgroundColor%3A%20'powderblue'%2C%5Cn%20%20%20%20%20%20%20%20%7D%7D%3E%5Cn%20%20%20%20%20%20%20%20%3CText%20style%3D%7B%7BfontSize%3A%2028%2C%20textAlign%3A%20'center'%2C%20margin%3A%2010%7D%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20Fading%20in%5Cn%20%20%20%20%20%20%20%20%3C%2FText%3E%5Cn%20%20%20%20%20%20%3C%2FFadeInView%3E%5Cn%20%20%20%20%3C%2FView%3E%5Cn%20%20)%3B%5Cn%7D%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,a.kt)("p",null,"Try to edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"duration")," value to see how it affects the animation."),(0,a.kt)("h3",d({},{id:"interval"}),"Interval"),(0,a.kt)("p",null,"An interval is a period of time that occurs at regular intervals. For example, an interval of 1 second means that something happens every second."),(0,a.kt)("div",d({},{className:"snack-player","data-snack-name":"Interval","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%2C%20%7B%20useState%2C%20useEffect%20%7D%20from%20%5C%22react%5C%22%3B%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20interval%20%3D%20setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setCount(count%20%3D%3E%20count%20%2B%201)%3B%5Cn%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20return%20()%20%3D%3E%20clearInterval(interval)%3B%5Cn%20%20%7D%2C%20%5B%5D)%3B%5Cn%5Cn%20%20return%20%3Cdiv%3E%7Bcount%7D%3C%2Fdiv%3E%3B%5Cn%7D%5Cn%5Cnexport%20default%20Counter%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,a.kt)("p",null,"In the example above, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"useEffect")," to create an interval that runs every second. The interval updates the ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," state variable, which causes the component to re-render. The component's ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," value is displayed on the screen, so the user can see the count increase every second."),(0,a.kt)("h2",d({},{id:"gesture"}),"Gesture"),(0,a.kt)("p",null,"A gesture is a movement or action that a user makes with their hands or fingers. For example, a user might tap the screen to select an item, or swipe their finger across the screen to scroll through a list.\nIn the simulator, you can simulate a gesture by dragging your mouse or trackpad across the screen."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PanResponder")," is a React Native API that provides a way to handle gestures such as touches, swipes, and pinches. It allows the developer to respond to gestures in a flexible way, by providing callbacks for each step of the gesture."),(0,a.kt)("p",null,"When a component is given a ",(0,a.kt)("inlineCode",{parentName:"p"},"PanResponder"),", it is able to track the user's gestures and provide information about their movement, velocity, and location. This allows the developer to implement custom logic for different gestures, such as dragging an element across the screen or pinching to zoom in on an image."),(0,a.kt)("p",null,"In the example below, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"PanResponder")," to create a component that can be dragged across the screen. The component's position is updated as the user drags their finger across the screen, and it snaps back to its original position when the user releases their finger."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Gesture Example",src:n(4699).Z,width:"425",height:"690"})),(0,a.kt)("div",d({},{className:"snack-player","data-snack-name":"DragEvent","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%2C%20%7BuseRef%7D%20from%20'react'%3B%5Cnimport%20%7BAnimated%2C%20View%2C%20StyleSheet%2C%20PanResponder%2C%20Text%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20App%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20pan%20%3D%20useRef(new%20Animated.ValueXY()).current%3B%5Cn%20%20const%20panResponder%20%3D%20useRef(%5Cn%20%20%20%20PanResponder.create(%7B%5Cn%20%20%20%20%20%20onMoveShouldSetPanResponder%3A%20()%20%3D%3E%20true%2C%5Cn%20%20%20%20%20%20onPanResponderMove%3A%20Animated.event(%5Bnull%2C%20%7Bdx%3A%20pan.x%2C%20dy%3A%20pan.y%7D%5D)%2C%5Cn%20%20%20%20%20%20onPanResponderRelease%3A%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Animated.spring(pan%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20toValue%3A%20%7Bx%3A%200%2C%20y%3A%200%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20useNativeDriver%3A%20true%2C%5Cn%20%20%20%20%20%20%20%20%7D).start()%3B%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%7D)%2C%5Cn%20%20).current%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3CView%20style%3D%7Bstyles.container%7D%3E%5Cn%20%20%20%20%20%20%3CText%20style%3D%7Bstyles.titleText%7D%3EDrag%20%26%20Release%20this%20box!%3C%2FText%3E%5Cn%20%20%20%20%20%20%3CAnimated.View%5Cn%20%20%20%20%20%20%20%20style%3D%7B%7B%5Cn%20%20%20%20%20%20%20%20%20%20transform%3A%20%5B%7BtranslateX%3A%20pan.x%7D%2C%20%7BtranslateY%3A%20pan.y%7D%5D%2C%5Cn%20%20%20%20%20%20%20%20%7D%7D%5Cn%20%20%20%20%20%20%20%20%7B...panResponder.panHandlers%7D%3E%5Cn%20%20%20%20%20%20%20%20%3CView%20style%3D%7Bstyles.box%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FAnimated.View%3E%5Cn%20%20%20%20%3C%2FView%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cnconst%20styles%20%3D%20StyleSheet.create(%7B%5Cn%20%20container%3A%20%7B%5Cn%20%20%20%20flex%3A%201%2C%5Cn%20%20%20%20alignItems%3A%20'center'%2C%5Cn%20%20%20%20justifyContent%3A%20'center'%2C%5Cn%20%20%7D%2C%5Cn%20%20titleText%3A%20%7B%5Cn%20%20%20%20fontSize%3A%2014%2C%5Cn%20%20%20%20lineHeight%3A%2024%2C%5Cn%20%20%20%20fontWeight%3A%20'bold'%2C%5Cn%20%20%7D%2C%5Cn%20%20box%3A%20%7B%5Cn%20%20%20%20height%3A%20150%2C%5Cn%20%20%20%20width%3A%20150%2C%5Cn%20%20%20%20backgroundColor%3A%20'blue'%2C%5Cn%20%20%20%20borderRadius%3A%205%2C%5Cn%20%20%7D%2C%5Cn%7D)%3B%5Cn%5Cnexport%20default%20App%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.View")," component has a ",(0,a.kt)("inlineCode",{parentName:"p"},"transform")," property that is set to an array of two objects: ",(0,a.kt)("inlineCode",{parentName:"p"},"{translateX: pan.x}")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"{translateY: pan.y}"),". These objects are used to animate the position of the blue box when it is dragged."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"pan")," variable is created using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," hook, and it is set to a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.ValueXY()")," object. This object represents the position of the blue box on the screen."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," variable is also created using the useRef hook, and it is set to the result of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"PanResponder.create()"),". This creates a new ",(0,a.kt)("inlineCode",{parentName:"p"},"PanResponder")," object that responds to touch gestures on the screen. We will discuss the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," hook in more detail in a bit."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onMoveShouldSetPanResponder")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," object is set to a function that always returns true. This means that the ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," object will always respond to touch gestures."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onPanResponderMove")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," object is set to an ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.event")," function. This function takes an array of two arguments: null and an object with the properties ",(0,a.kt)("inlineCode",{parentName:"p"},"dx")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dy"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"dx")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dy")," properties represent the change in position of the blue box when it is dragged. This function updates the pan variable to reflect the new position of the blue box."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onPanResponderRelease")," method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," object is set to a function that animates the position of the blue box back to its original position. This function uses the Animated.spring function to create a spring animation that moves the blue box back to ",(0,a.kt)("inlineCode",{parentName:"p"},"{x: 0, y: 0}"),"."),(0,a.kt)("h4",d({},{id:"useref-hook"}),(0,a.kt)("inlineCode",{parentName:"h4"},"useRef")," hook"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," is a special tool in React that helps us access a piece of data in our components. We can use it to hold onto some data and access it later when we need it, just like a box where we can put something in and take it out later."),(0,a.kt)("p",null,"In the example code, ",(0,a.kt)("inlineCode",{parentName:"p"},"const pan = useRef(new Animated.ValueXY()).current;")," creates a box called ",(0,a.kt)("inlineCode",{parentName:"p"},"pan")," that holds the animated value of the X and Y coordinates of our box."),(0,a.kt)("p",null,"We can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," to keep track of something that needs to be persisted between renderings, like an animation object or an HTML element. ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," which we have used before. The difference is that ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," does not trigger a re-render when its content changes."),(0,a.kt)("h3",d({},{id:"class-component"}),"Class Component"),(0,a.kt)("p",null,"Read the code below, and compare it to the code in the previous example. What is the difference?"),(0,a.kt)("div",d({},{className:"snack-player","data-snack-name":"DragEventClass","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%2C%20%7BComponent%7D%20from%20'react'%3B%5Cnimport%20%7BAnimated%2C%20View%2C%20StyleSheet%2C%20PanResponder%2C%20Text%7D%20from%20'react-native'%3B%5Cn%5Cnexport%20default%20class%20App%20extends%20Component%20%7B%5Cn%20%20pan%20%3D%20new%20Animated.ValueXY()%3B%5Cn%20%20panResponder%20%3D%20PanResponder.create(%7B%5Cn%20%20%20%20onMoveShouldSetPanResponder%3A%20()%20%3D%3E%20true%2C%5Cn%20%20%20%20onPanResponderMove%3A%20Animated.event(%5B%5Cn%20%20%20%20%20%20null%2C%5Cn%20%20%20%20%20%20%7Bdx%3A%20this.pan.x%2C%20dy%3A%20this.pan.y%7D%2C%5Cn%20%20%20%20%5D)%2C%5Cn%20%20%20%20onPanResponderRelease%3A%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20Animated.spring(this.pan%2C%20%7B%5Cn%20%20%20%20%20%20%20%20toValue%3A%20%7Bx%3A%200%2C%20y%3A%200%7D%2C%5Cn%20%20%20%20%20%20%20%20useNativeDriver%3A%20true%2C%5Cn%20%20%20%20%20%20%7D).start()%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D)%3B%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3CView%20style%3D%7Bstyles.container%7D%3E%5Cn%20%20%20%20%20%20%20%20%3CText%20style%3D%7Bstyles.titleText%7D%3EDrag%20%26%20Release%20this%20box!%3C%2FText%3E%5Cn%20%20%20%20%20%20%20%20%3CAnimated.View%5Cn%20%20%20%20%20%20%20%20%20%20style%3D%7B%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20transform%3A%20%5B%7BtranslateX%3A%20this.pan.x%7D%2C%20%7BtranslateY%3A%20this.pan.y%7D%5D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7D%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7B...this.panResponder.panHandlers%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3CView%20style%3D%7Bstyles.box%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2FAnimated.View%3E%5Cn%20%20%20%20%20%20%3C%2FView%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20styles%20%3D%20StyleSheet.create(%7B%5Cn%20%20container%3A%20%7B%5Cn%20%20%20%20flex%3A%201%2C%5Cn%20%20%20%20alignItems%3A%20'center'%2C%5Cn%20%20%20%20justifyContent%3A%20'center'%2C%5Cn%20%20%7D%2C%5Cn%20%20titleText%3A%20%7B%5Cn%20%20%20%20fontSize%3A%2014%2C%5Cn%20%20%20%20lineHeight%3A%2024%2C%5Cn%20%20%20%20fontWeight%3A%20'bold'%2C%5Cn%20%20%7D%2C%5Cn%20%20box%3A%20%7B%5Cn%20%20%20%20height%3A%20150%2C%5Cn%20%20%20%20width%3A%20150%2C%5Cn%20%20%20%20backgroundColor%3A%20'blue'%2C%5Cn%20%20%20%20borderRadius%3A%205%2C%5Cn%20%20%7D%2C%5Cn%7D)%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,a.kt)("p",null,"The code works the same way as the code in the previous example: the blue box can be dragged across the screen, and it snaps back to its original position when the user releases their finger."),(0,a.kt)("p",null,"You might notice that the code in the class component example is very similar to the code in the previous example. The only difference is that the ",(0,a.kt)("inlineCode",{parentName:"p"},"pan")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," variables are not created using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," hook. Instead, they are created as properties of the ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," class."),(0,a.kt)("h2",d({},{id:"objective-oriented-programming"}),"Objective-oriented programming"),(0,a.kt)("p",null,"In the class component example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"pan")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," variables are created as properties of the ",(0,a.kt)("inlineCode",{parentName:"p"},"App")," class. This is called ",(0,a.kt)("strong",{parentName:"p"},"object-oriented programming"),". In object-oriented programming, we create objects that have properties and methods. The properties and methods of an object are called ",(0,a.kt)("strong",{parentName:"p"},"members"),"."),(0,a.kt)("p",null,'Object-oriented programming (OOP) is a programming paradigm that revolves around the concept of "objects" that have properties and behaviors. It\'s a way to organize and structure code in a more intuitive and manageable way, allowing for better code reuse, abstraction, and encapsulation.'),(0,a.kt)("p",null,'In OOP, everything is an object, and objects are instances of classes. A class is like a blueprint or a template that defines the properties and behaviors of objects. For example, if you have a class called "Car", you can create many instances of that class, each with its own properties like make, model, and color, and behaviors like accelerating, braking, and turning.'),(0,a.kt)("p",null,"The main advantages of OOP are:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Code reuse"),': OOP allows us to reuse code by creating objects that share the same properties and behaviors. For example, if we have a class called "Car", we can create many instances of that class, each with its own properties like make, model, and color, and behaviors like accelerating, braking, and turning.'),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Abstraction"),": OOP allows us to hide the implementation details of an object from the outside world. This allows us to focus on the important parts of the object, and not worry about the details. For example, a car driver doesn't need to know how the engine works, but only needs to know how to start and stop the car."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Encapsulation"),": OOP allows us to restrict access to certain properties and methods of an object. This allows us to hide the implementation details of an object from the outside world, and only expose the properties and methods that we want to be accessible. We can use encapsulation to hide the internal details of the car and only provide access to its behavior through its methods. For example:")),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-tsx"}),"class Car {\n  #color = 'red'; // private property\n  #engineOn = false; // private property\n\n  startEngine() {\n    this.#engineOn = true;\n    console.log('Engine started');\n  }\n\n  stopEngine() {\n    this.#engineOn = false;\n    console.log('Engine stopped');\n  }\n\n  get color() {\n    // public getter\n    return this.#color;\n  }\n\n  set color(value) {\n    // public setter\n    this.#color = value;\n    console.log(`Color changed to ${this.#color}`);\n  }\n}\n\nconst myCar = new Car();\n\nmyCar.color = 'blue'; // calling the public setter\nconsole.log(myCar.color); // calling the public getter\nmyCar.startEngine(); // calling the public method\n")),(0,a.kt)("p",null,"In this example, we have used the ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," symbol to mark the ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"engineOn")," properties as ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"private")),", which means they can only be accessed from within the class. We have also provided public access to the ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," property using a getter and setter method, which allows us to modify and retrieve the ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"car")," while hiding the implementation details."),(0,a.kt)("ol",d({},{start:4}),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Inheritance"),": Inheritance is the process of creating new classes based on existing classes, which allows us to reuse existing code and build new classes that inherit the properties and methods of their parent class.")),(0,a.kt)("p",null,"Let's say we want to create a new class called ",(0,a.kt)("inlineCode",{parentName:"p"},"SportsCar")," that inherits from our ",(0,a.kt)("inlineCode",{parentName:"p"},"Car")," class and adds some new properties and methods that define its unique behavior:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-tsx"}),"class SportsCar extends Car {\n  #topSpeed = 200; // private property\n\n  accelerate() {\n    console.log(`Accelerating to ${this.#topSpeed} km/h`);\n  }\n}\n\nconst mySportsCar = new SportsCar();\n\nmySportsCar.color = 'green';\nconsole.log(mySportsCar.color); // calling the public getter\nmySportsCar.startEngine(); // calling the public method\nmySportsCar.accelerate(); // calling the public method of the derived class\n")),(0,a.kt)("p",null,"In this example, we have created a new ",(0,a.kt)("inlineCode",{parentName:"p"},"SportsCar")," class that inherits from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Car")," class using the extends keyword. We have also added a private ",(0,a.kt)("inlineCode",{parentName:"p"},"topSpeed")," property and a public ",(0,a.kt)("inlineCode",{parentName:"p"},"accelerate()")," method that define the unique behavior of a sports car."),(0,a.kt)("h4",d({},{id:"class-properties"}),"Class Properties"),(0,a.kt)("p",null,"A class component has a ",(0,a.kt)("inlineCode",{parentName:"p"},"render()")," method that returns a React element, which can be rendered to the screen. It also has access to a ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," object, which is used to manage the component's data and re-render the component when the data changes."),(0,a.kt)("p",null,"Class components can also have lifecycle methods, which are special methods that are called at specific points during the component's lifecycle, such as when it's first created or when it's updated. These methods can be used to perform tasks such as fetching data or updating the component's state."),(0,a.kt)("p",null,"Here's an example of a simple class component in React:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-tsx"}),"import React, {Component} from 'react';\n\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n\nexport default Greeting;\n")),(0,a.kt)("p",null,"In this example, we're creating a Greeting component that extends the Component class provided by React. It has a render() method that returns a h1 element containing a greeting message with the name prop passed in as a parameter. We're also exporting the Greeting component so that it can be used in other parts of the application."),(0,a.kt)("p",null,"Back to our moving box example,"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-tsx"}),"render() {\n return (\n   <View style={styles.container}>\n     <Text style={styles.titleText}>Drag & Release this box!</Text>\n     <Animated.View\n       style={{\n         transform: [{translateX: this.pan.x}, {translateY: this.pan.y}],\n       }}\n       {...this.panResponder.panHandlers}>\n       <View style={styles.box} />\n     </Animated.View>\n   </View>\n );\n}\n")),(0,a.kt)("p",null,"The render method is then used to render the components to the screen. It creates a ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," with a style that centers the contents of the screen, and a Text component that displays the text ",(0,a.kt)("inlineCode",{parentName:"p"},'"Drag & Release this box!"'),". It then creates an ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.View")," component that contains the blue box, with a style that uses the transform property to translate the box based on the current ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," values of the pan object. The ",(0,a.kt)("inlineCode",{parentName:"p"},"panHandlers")," property is also passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Animated.View")," component, which allows it to respond to touch gestures detected by the ",(0,a.kt)("inlineCode",{parentName:"p"},"panResponder")," object."),(0,a.kt)("h2",d({},{id:"exercise"}),"Exercise"),(0,a.kt)("p",null,"Create a component called EmojiTimer that displays a random emoji (e.g., \ud83c\udf55, \ud83d\udc36, \ud83c\udf89) in a centered view box, and updates the emoji every 3 seconds."),(0,a.kt)("p",null,"To do this, you'll need to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a class component called EmojiTimer. You can add your favorite emojis to the array of emojis."),(0,a.kt)("li",{parentName:"ul"},"In the constructor, initialize the component state with an array of emojis and a default emoji to display."),(0,a.kt)("li",{parentName:"ul"},"Create a method called startTimer that sets a time interval to update the displayed emoji every 3 seconds."),(0,a.kt)("li",{parentName:"ul"},"In the component's render method, display the current emoji in a centered view box.")),(0,a.kt)("p",null,"We have provided some starter code for you to get started:"),(0,a.kt)("div",d({},{className:"snack-player","data-snack-name":"EmojiTimer","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%2C%20%7B%20Component%20%7D%20from%20'react'%3B%5Cnimport%20%7B%20View%2C%20Text%20%7D%20from%20'react-native'%3B%5Cn%5Cnclass%20EmojiTimer%20extends%20Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20emojis%3A%20%5B'%F0%9F%8D%95'%2C%20'%F0%9F%90%B6'%2C%20'%F0%9F%8E%89'%2C%20'%F0%9F%8E%82'%5D%2C%5Cn%20%20%20%20%20%20currentEmoji%3A%20'%F0%9F%8D%95'%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentDidMount()%20%7B%5Cn%20%20%20%20this.startTimer()%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentWillUnmount()%20%7B%5Cn%20%20%20%20clearInterval(this.intervalId)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20startTimer()%20%7B%5Cn%20%20%20%20this.intervalId%20%3D%20setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20const%20%7B%20emojis%20%7D%20%3D%20this.state%3B%5Cn%20%20%20%20%20%20const%20randomIndex%20%3D%20Math.floor(Math.random()%20*%20emojis.length)%3B%5Cn%20%20%20%20%20%20%2F%2F%20Write%20code%20here%20to%20get%20a%20random%20emoji%20from%20the%20emojis%20array%5Cn%20%20%20%20%20%20this.setState(%7B%20currentEmoji%3A%20randomEmoji%20%7D)%3B%5Cn%20%20%20%20%7D%2C%203000)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20%7B%20currentEmoji%20%7D%20%3D%20this.state%3B%5Cn%20%20%20%20%2F%2F%20Write%20code%20here%20to%20display%20the%20current%20emoji%20in%20a%20centered%20view%20box%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnexport%20default%20EmojiTimer%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,a.kt)("p",null,"This is what the final result should look like:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"EmojiTimer",src:n(1483).Z,width:"419",height:"692"})))}g.isMDXComponent=!0},4699:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/chp5_drag-886d2e3122733cea05bf7099df86340e.png"},1483:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/chp5_homework-d284ec3c1f507f3a403a617b918dd672.png"}}]);