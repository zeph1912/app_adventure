"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[152],{5318:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7378);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=o,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4557:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>y,frontMatter:()=>u,metadata:()=>h,toc:()=>g});var n=a(5318),o=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,c=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&d(e,a,t[a]);if(l)for(var a of l(t))p.call(t,a)&&d(e,a,t[a]);return e};const u={id:"chapter_one",title:"Chapter 1 - Basics",description:"This chapter will introduce you to the basics of React programming."},m=void 0,h={unversionedId:"chapter_one",id:"chapter_one",title:"Chapter 1 - Basics",description:"This chapter will introduce you to the basics of React programming.",source:"@site/../docs/chp1.md",sourceDirName:".",slug:"/chapter_one",permalink:"/app_adventure/docs/chapter_one",draft:!1,tags:[],version:"current",lastUpdatedAt:1681183291,formattedLastUpdatedAt:"Apr 11, 2023",frontMatter:{id:"chapter_one",title:"Chapter 1 - Basics",description:"This chapter will introduce you to the basics of React programming."},sidebar:"defaultSidebar",previous:{title:"Objectives",permalink:"/app_adventure/docs/Course"},next:{title:"Chapter 2 - Components",permalink:"/app_adventure/docs/chapter_two"}},k={},g=[{value:"What is coding",id:"what-is-coding",level:2},{value:"What is an app",id:"what-is-an-app",level:2},{value:"Cross-platform app and why they are popular",id:"cross-platform-app-and-why-they-are-popular",level:2},{value:"Build app with React",id:"build-app-with-react",level:2},{value:"How are we going to learn building an app",id:"how-are-we-going-to-learn-building-an-app",level:2},{value:"We need a developing environment (IDE)",id:"we-need-a-developing-environment-ide",level:3},{value:"What you will need",id:"what-you-will-need",level:3},{value:"Let&#39;s start",id:"lets-start",level:2},{value:"Interactive Example",id:"interactive-example",level:3},{value:"Practicing programming basics",id:"practicing-programming-basics",level:2},{value:"Variables",id:"variables",level:3},{value:"Constants",id:"constants",level:3},{value:"Data type",id:"data-type",level:3},{value:"See the Type of a variable",id:"see-the-type-of-a-variable",level:3},{value:"Type can be changed",id:"type-can-be-changed",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Condition",id:"condition",level:3},{value:"AND logic",id:"and-logic",level:4},{value:"OR logic",id:"or-logic",level:4},{value:"NOT logic",id:"not-logic",level:4},{value:"Loop",id:"loop",level:3},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Example 3",id:"example-3",level:4},{value:"Example 4",id:"example-4",level:4},{value:"Function",id:"function",level:3}],f={toc:g};function y(e){var t,a=e,{components:o}=a,d=((e,t)=>{var a={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&p.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=c(c({},f),d),r(t,i({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("div",{className:"content-banner"},(0,n.kt)("p",null,"Welcome to the first chapter of the book, in this chapter, we will introduce you to the basics of React programming. First, we will talk about what is coding, what is an app, and why cross-platform apps are popular. Then we will talk about what is React and why it is popular. You will also learn basic programming concepts, such as variables, functions, and loops."),(0,n.kt)("img",{className:"content-banner-img",src:"/docs/assets/p_android-ios-devices.svg",alt:" "})),(0,n.kt)("h2",c({},{id:"what-is-coding"}),"What is coding"),(0,n.kt)("p",null,"Coding is like giving instructions to a computer to tell it what to do.\nJust like how you use words to tell your friends what to do, coders use a special language called a ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"programming language"))," to tell the computer what to do.\nThis special language is made up of a set of instructions, called ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"code")),", that the computer can understand and follow."),(0,n.kt)("p",null,"Coding is used to make a lot of different things, like making websites, apps, video games, and even controlling robots.\nIt's an important skill to have in today's world for a few reasons,"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Career opportunities: Coding is in high demand in today's job market, and many industries rely on it. Knowing how to code can open up a wide range of career options, such as software development, web design, and data analysis.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Problem-solving skills: Coding requires logical thinking and problem-solving skills. When you learn how to code, you learn how to break down complex problems into smaller, manageable pieces and come up with solutions. These skills are valuable not just for coding, but for any field.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Creativity: Coding allows you to bring your own ideas to life. You can create your own website, game, or app and share it with the world. In this book, we are going to look at how to build your own app. It's a great way to express yourself and showcase your creativity.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Future of Technology: As technology continues to advance, the importance of coding will only increase. Coding is the language that allows us to communicate with technology and make it do what we want. It will be essential for many jobs in the future.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Empowerment: Learning to code gives you the power to create your own digital world and make your own digital products, this will empower you to be independent and to have a better understanding of the technology that surrounds you."))),(0,n.kt)("p",null,"Overall, learning to code can be challenging, but it's a valuable skill that can open up many opportunities and help you develop important problem-solving, creative, and critical thinking skills."),(0,n.kt)("p",null,"The goal of this book is to help you build your first app hand-by-hand, and in the meanwhile, help you understand the key ideas in coding."),(0,n.kt)("h2",c({},{id:"what-is-an-app"}),"What is an app"),(0,n.kt)("p",null,"A computer application, also known as an ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"app")),", is a software program that runs on a computer or mobile device.\nIt's designed to perform a specific task or set of tasks, such as playing a game, creating a document, managing your finances, or ordering food."),(0,n.kt)("p",null,"Apps can be downloaded from an ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"app store")),", like the App Store for iPhones or Google Play for Android devices.\nOnce you have an app on your device, you can open it and use it like you would use any other program on your computer."),(0,n.kt)("p",null,"For example, if you want to play a game, you would go to the app store, search for the game you want, and then download it.\nOnce it's downloaded, you can open the game and start playing."),(0,n.kt)("p",null,"Apps make it easy to do a lot of things right from your phone or computer.\nThey are very convenient and user-friendly, and they have a wide range of functionalities, from social media, to entertainment, and a lot more."),(0,n.kt)("h2",c({},{id:"cross-platform-app-and-why-they-are-popular"}),"Cross-platform app and why they are popular"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Cross-platform apps"))," are applications that can run on multiple operating systems or devices, such as Android, iOS, and Windows. These types of apps have become increasingly popular due to the growing number of platforms and devices available in today's market."),(0,n.kt)("p",null,"One of the main advantages of cross-platform apps is their versatility. Developers can create a single codebase that can be used across different platforms, which can save time and resources compared to developing separate apps for each platform. This also allows developers to reach a wider audience, as users on different devices can access the same app."),(0,n.kt)("p",null,"Another advantage is that cross-platform apps can be easier to maintain and update. Since the codebase is shared across platforms, updates and bug fixes can be applied to all versions simultaneously. This reduces the need for separate teams to maintain and update different versions of the app, which can lead to a more streamlined development process."),(0,n.kt)("p",null,"Additionally, cross-platform apps can provide a consistent user experience across different devices and platforms. This can help to build brand recognition and loyalty, as users become familiar with the app's design and functionality."),(0,n.kt)("p",null,"Overall, the popularity of cross-platform apps is likely to continue to grow as more devices and platforms are introduced to the market, and as developers seek to create efficient and effective apps that can be used by a wide range of users."),(0,n.kt)("h2",c({},{id:"build-app-with-react"}),"Build app with React"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"React"))," is a way to build apps that work on different types of devices, like phones or computers.\nIt's popular because it helps developers make changes to the app easily and quickly, by breaking the app up into small parts called ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"components")),".\nThis makes it easier to fix bugs and add new features.\nAlso, React makes the app run faster by only updating the parts of the app that need to change, instead of the whole app every time."),(0,n.kt)("p",null,"Another reason why React is popular is that a lot of people use it, so it's easy to find help and learn from other people.\nAn active community provides a wealth of resources and support for developers."),(0,n.kt)("p",null,"The app we are going to build with React can run on both Android and iOS, and if you want, you can even run it from a browser on any computer."),(0,n.kt)("h2",c({},{id:"how-are-we-going-to-learn-building-an-app"}),"How are we going to learn building an app"),(0,n.kt)("h3",c({},{id:"we-need-a-developing-environment-ide"}),"We need a developing environment (IDE)"),(0,n.kt)("p",null,"An ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"IDE")),", or Integrated Development Environment, is a software application that provides a complete set of tools for writing, editing, and debugging code. An IDE usually includes a text editor for writing code, a compiler or interpreter for running code, and a debugging tool for finding and fixing errors in your code."),(0,n.kt)("p",null,"An ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"online IDE"))," is a type of IDE that is accessed through a web browser, rather than being installed on your computer. This means you can use an online IDE from any device that has internet access, and you don't have to worry about installing or updating software. An online IDE is like a toolbox you can access it from anywhere, as long as you have internet access."),(0,n.kt)("p",null,"In this book, we use the Snack Player created by ",(0,n.kt)("a",c({parentName:"p"},{href:"https://expo.dev"}),"Expo"),", which is an online IDE that allows you to write and test React code directly in the browser. It's a great tool for learning how to build apps because it eliminates the need to set up a local development environment on your computer."),(0,n.kt)("p",null,"With Snack, you can write code and see how your app looks and works in real-time. You can also use pre-built pieces of code to make your app do different things."),(0,n.kt)("p",null,"Another cool thing about Snack is that you can share your app with others just by sharing a link. This makes it easy to work on projects with other people or show off what you've made to your friends and family."),(0,n.kt)("h3",c({},{id:"what-you-will-need"}),"What you will need"),(0,n.kt)("p",null,"For building your first app, you should have either a laptop or a tablet with a keyboard. Having a device with a keyboard will make it easier for you to write and test your code."),(0,n.kt)("p",null,"A laptop would be the best option as it will have more resources and flexibility but a tablet with a keyboard will also be suitable. Internet access is also required."),(0,n.kt)("h2",c({},{id:"lets-start"}),"Let's start"),(0,n.kt)("p",null,"We are going to look at the basic concepts of programming, and learn how to use our IDE. We will be using the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://expo.dev"}),"Expo"),"'s Snack Player, which is built right into this interactive book."),(0,n.kt)("h3",c({},{id:"interactive-example"}),"Interactive Example"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20return%20%3CText%3E%20Hello%20World%2C%20the%20beginning%20of%20all%20coding%20adventures!%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"Click ",(0,n.kt)("inlineCode",{parentName:"p"},"Web")," button, you will see the output of the code above.\nYou can also try this code on an Android or iOS emulator by clicking the ",(0,n.kt)("inlineCode",{parentName:"p"},"Android")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"iOS")," button."),(0,n.kt)("p",null,"This code simply prints ",(0,n.kt)("inlineCode",{parentName:"p"},"Hello World, the beginning of all coding adventures!")," on the screen. It might not look like much, but congratulations! You just wrote your first line of code."),(0,n.kt)("h2",c({},{id:"practicing-programming-basics"}),"Practicing programming basics"),(0,n.kt)("h3",c({},{id:"variables"}),"Variables"),(0,n.kt)("p",null,"Have you ever heard of the term ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"variable"))," in coding? In simple terms, a variable is a way for a computer program to store and use data. Just like you have a locker or a pencil box to keep your things organized, a variable helps a computer program keep track of important information."),(0,n.kt)("p",null,'In programming, we can give a variable a name and assign a value to it. This value can be changed and used throughout the program. For example, if we have a variable named "score" and assign it a value of 0, we can add to that score later on in the program.'),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20name%20%3D%20%5C%22World%5C%22%3B%20%2F%2F%20replace%20%5C%22World%5C%22%20with%20your%20name%5Cn%20%20return%20%3CText%3E%20Hello%20%7Bname%7D%2C%20the%20beginning%20of%20all%20coding%20adventures!%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,'The code above is very similar to the code we wrote earlier, but this time we have added a variable called "name". Let\'s change the value of the variable to your name and see what happens.'),(0,n.kt)("p",null,"Let's break down the code above:\nIn the function ",(0,n.kt)("inlineCode",{parentName:"p"},"helloworld")," (we will cover what is a function in a bit), we have a variable called ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," that is assigned a value of ",(0,n.kt)("inlineCode",{parentName:"p"},'"World"'),". We can change the value of the variable to anything we want. In this case, you changed the value of the variable to your name."),(0,n.kt)("p",null,"The variable ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," is then used in the text message that is displayed on the screen. The text message is enclosed in curly braces ",(0,n.kt)("inlineCode",{parentName:"p"},"{}"),". This is how we tell the program that we want to use the value of the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," in the text message."),(0,n.kt)("p",null,'Congratulations! You have just created a variable and used it to display the text "Hello World!" in your program. Now you know how variables work in coding, and how they can be used to store and manipulate data in a program. Keep practicing and have fun coding!'),(0,n.kt)("h3",c({},{id:"constants"}),"Constants"),(0,n.kt)("p",null,"In programming, a constant is a special type of variable that is used to store a value that cannot be changed once it has been set. Think of it like a box that you can put something in, but once it's in there, you can't take it out or change it."),(0,n.kt)("p",null,"For example, let's say you want to write a program to calculate the area of a circle. The formula for calculating the area is ",(0,n.kt)("inlineCode",{parentName:"p"},"\u03c0*r^2"),", where ",(0,n.kt)("inlineCode",{parentName:"p"},"r")," is the radius of the circle. Since ",(0,n.kt)("inlineCode",{parentName:"p"},"\u03c0")," is a number that never changes, you can use a constant to store its value and make your code more readable."),(0,n.kt)("p",null,"Using constants can make your code easier to understand and maintain. It also helps prevent accidental changes to important values in your program. So remember, a constant is like a box that you can put something in, but once it's in there, you can't take it out or change it."),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20name%20%3D%20%5C%22World%5C%22%3B%20%2F%2F%20replace%20%5C%22World%5C%22%20with%20your%20name%5Cn%20%20return%20%3CText%3E%20Hello%20%7Bname%7D%2C%20the%20beginning%20of%20all%20coding%20adventures!%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"The code above is very similar to the code we wrote earlier, but this time the name variable is declared as a constant.\nThis code should work the same as the code we wrote earlier. The only difference is that the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," is now a constant."),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20name%20%3D%20%5C%22World%5C%22%3B%20%2F%2F%20replace%20%5C%22World%5C%22%20with%20your%20name%5Cn%20%20%2F%2F%20TYPE%20HERE%5Cn%20%20return%20%3CText%3E%20Hello%20%7Bname%7D%2C%20the%20beginning%20of%20all%20coding%20adventures!%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"Let's change the value of the constant to your name and see what happens.\nReplace ",(0,n.kt)("inlineCode",{parentName:"p"},"// TYPE HERE")," with ",(0,n.kt)("inlineCode",{parentName:"p"},'name = "Your name";'),", and you will see an error message ",(0,n.kt)("inlineCode",{parentName:"p"},'"name" is read-only')," saying that you cannot change the value of a constant."),(0,n.kt)("p",null,"When you see an error message, it means that something is wrong with your code. Do not panic when you see an error message. It is a good thing that the program is telling you that something is wrong. It is always a good practice to read the error message and try to understand what is wrong with your code."),(0,n.kt)("h3",c({},{id:"data-type"}),"Data type"),(0,n.kt)("p",null,"In React programming, just like any other programming languages, data types are used to represent different kinds of information that can be stored and manipulated in a program. The three most common data types used in React are strings, numbers, and booleans."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("em",{parentName:"strong"},"Strings")),": Strings are used to represent text in a program. They are written using quotes, either single quotes ('') or double quotes (\"\"). For example:")),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"greeting = 'Hello, world!';\n")),(0,n.kt)("p",null,"You can combine ",(0,n.kt)("inlineCode",{parentName:"p"},"const")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," to create a constant string. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"const greeting = 'Hello, world!';\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("em",{parentName:"strong"},"Numbers")),": Numbers are used to represent numeric values in a program. They can be integers (whole numbers) or floating-point numbers (numbers with decimal places). For example:")),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"age = 10;\nconst pi = 3.14159;\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("em",{parentName:"strong"},"Booleans")),": Booleans are used to represent true or false values in a program. They are often used to represent the result of a conditional statement. For example:")),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"const isOn = true;\nconst isOff = false;\n")),(0,n.kt)("p",null,"In addition to these three basic data types, React also supports more complex data types such as objects and arrays. Objects are used to represent collections of related data, while arrays are used to store collections of data of the same type. We will cover these data types in the next sections."),(0,n.kt)("h3",c({},{id:"see-the-type-of-a-variable"}),"See the Type of a variable"),(0,n.kt)("p",null,"In programming, we can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"typeof")," operator to check the data type of a variable. For example, if we have a variable ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," that is assigned a value of ",(0,n.kt)("inlineCode",{parentName:"p"},'"World"'),", we can use ",(0,n.kt)("inlineCode",{parentName:"p"},"typeof name")," to check the data type of the variable. The result will be ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20name%20%3D%20%5C%22World%5C%22%3B%5Cn%20%20return%20%3CText%3E%20The%20type%20of%20const%20name%20is%20%7Btypeof(name)%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"Now, it is your turn to try it out. In the following code, define a variable ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," and assign it a value of your age. Then, use ",(0,n.kt)("inlineCode",{parentName:"p"},"typeof")," to check the data type of the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"age"),". Replace TYPE HERE with your code."),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20TYPE%20HERE%5Cn%20%20return%20%3CText%3E%20TYPE%20HERE%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("h3",c({},{id:"type-can-be-changed"}),"Type can be changed"),(0,n.kt)("p",null,"In React, variables can be reassigned with different data types. This means that the type of a variable can change during the course of a program. For example, a variable that starts out as a string can be reassigned with a number, or vice versa."),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20age%20%3D%2013%3B%5Cn%20%20age%20%3D%20%5C%2213%5C%22%3B%5Cn%20%20return%20%3CText%3E%20The%20type%20of%20const%20name%20is%20%7Btypeof(name)%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"In this example, the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," is first assigned a value of 13, which is a number. Then, the variable is reassigned with a value of ",(0,n.kt)("inlineCode",{parentName:"p"},'"13"'),", which is a string. The type of the variable ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," is changed from number to string."),(0,n.kt)("p",null,"It is important to note that the type of a variable can change during the course of a program. However, it is not a good practice to change the type of a variable. Changing the type of a variable can have unintended consequences if it's not done carefully. For example, if you try to perform a string operation on a variable that has been reassigned with a number, you will get an error. Therefore, It is better to use a different variable to store a different data type."),(0,n.kt)("h3",c({},{id:"arrays"}),"Arrays"),(0,n.kt)("p",null,"An ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"array"))," is a collection of variables of the same data type. In programming, arrays are used to store multiple values in a single variable. Arrays are declared using square brackets ([]), and each value in the array is separated by a comma. Think of an array like a grocery list where you have a list of items you need to buy from the store:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"const fruits = ['apple', 'banana', 'orange', 'pear'];\n")),(0,n.kt)("p",null,"In this example, fruits is an array that contains four string values. You can access individual values in an array by using the index of the value, which starts at 0. For example, to access the first value in the fruits array, you would use fruits","[0]","."),(0,n.kt)("p",null,"Now let's say you wanted to add a new fruit to your array. You can use the push method to add an item to the end of the list, just like how you would add a new item to your grocery list. Here's how you could add a new fruit called 'grape' to your array:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"fruits.push('grape');\n")),(0,n.kt)("p",null,"Now, your fruits array will look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"['apple', 'banana', 'orange', 'pear', 'grape'];\n")),(0,n.kt)("p",null,"On the other hand, if you wanted to remove the last item from your array, you can use the pop method. It's like crossing off the last item on your grocery list because you don't need it anymore. Here's how you could remove 'grape' from your array:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"fruits.pop();\n")),(0,n.kt)("p",null,"Now, your fruits array will look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"['apple', 'banana', 'orange', 'pear'];\n")),(0,n.kt)("p",null,"Arrays can even store values of any data type, including strings, numbers, booleans, and even other another array. Here's an example of an array that contains different data types:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"const mixedArray = ['apple', 42, true];\n")),(0,n.kt)("p",null,"Now you have learned how to create an array and add or remove items from it. Here is a quiz for you to test your knowledge."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create an array of your favorite movies using."),(0,n.kt)("li",{parentName:"ol"},"Add a new movie to your array using the push method."),(0,n.kt)("li",{parentName:"ol"},"Use a for loop to loop through your array and log each movie to the console."),(0,n.kt)("li",{parentName:"ol"},"Use the pop method to remove the last movie from your array.")),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20favoriteMovies%20%3D%20%5B%5D%3B%20%2F%2F%20Your%20code%20here%5Cn%5Cn%20%20return%20%3CText%3E%20My%20favorite%20movie%20list%3A%20%7BfavoriteMovies%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("h3",c({},{id:"condition"}),"Condition"),(0,n.kt)("p",null,"An if condition is a way to make a decision in your code. It allows your code to execute different blocks of code depending on whether a certain condition is true or false."),(0,n.kt)("p",null,"Here's an example: Imagine you're writing a program to determine if a student has passed a test. You might write something like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"score = 75;\npass = false;\n\nif (score >= 60) {\n  pass = true;\n} else {\n  pass = false;\n}\n")),(0,n.kt)("p",null,"In this code, we're checking if the score is greater than or equal to 60. If it is, we set ",(0,n.kt)("inlineCode",{parentName:"p"},"pass")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),". If it's not, we set ",(0,n.kt)("inlineCode",{parentName:"p"},"pass")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("p",null,"The if statement checks if the condition in the parentheses is true. If it is, the code inside the curly braces after the if statement is executed. If the condition is false, the code inside the curly braces after the else statement is executed."),(0,n.kt)("p",null,"In summary, if conditions are a way to make decisions in your code based on whether a condition is true or false. By using if conditions, you can make your code more dynamic and responsive to different situations."),(0,n.kt)("p",null,"It is important to know the logic operators that you can use to compare values in your code."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Operator"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"==")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"!=")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Not equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},">")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Greater than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"<")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Less than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},">=")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Greater than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"<=")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Less than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"&&")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"And")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"\u2502\u2502")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Or")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"!")),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Not")))),(0,n.kt)("p",null,"In some programming language that you might learn later, you use different operators to compare values. For example, Python uses ",(0,n.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"or"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"not")," instead of ",(0,n.kt)("inlineCode",{parentName:"p"},"&&"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"||"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"!"),". However, in React, you use the same operators that you use in math."),(0,n.kt)("h4",c({},{id:"and-logic"}),"AND logic"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"AND (&&)")),": The AND operator is used to combine two or more conditions together. It returns true only if all conditions are true. Here's an example:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20const%20age%20%3D%2015%3B%5Cn%20%20%20const%20isStudent%20%3D%20true%3B%5Cn%5Cn%20%20%20if%20(age%20%3E%3D%2018%20%26%26%20isStudent)%20%7B%5Cn%20%20%20%20%20return%20%3CText%3E%20You%20are%20eligible%20for%20a%20student%20discount!%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20return%20%3CText%3E%20Sorry%2C%20you%20are%20not%20eligible%20for%20a%20student%20discount.%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,'In this code, we\'re checking if the age is greater than or equal to 18 AND if the isStudent variable is true. Only if both conditions are true, we print "You are eligible for a student discount!".'),(0,n.kt)("h4",c({},{id:"or-logic"}),"OR logic"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"OR (||)")),": The OR operator is used to combine two or more conditions together. It returns true if any of the conditions are true. Here's an example:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20const%20isMember%20%3D%20false%3B%5Cn%20%20%20const%20isSubscriber%20%3D%20true%3B%5Cn%5Cn%20%20%20if%20(isMember%20%7C%7C%20isSubscriber)%20%7B%5Cn%20%20%20%20return%20%3CText%3E%20You%20are%20eligible%20for%20a%20discount!%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20return%20%3CText%3E%20Sorry%2C%20you%20are%20not%20eligible%20for%20a%20discount.%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,'In this code, we\'re checking if the isMember variable is true OR if the isSubscriber variable is true. If either one of them is true, we print "You are eligible for free shipping!" to the console.'),(0,n.kt)("h4",c({},{id:"not-logic"}),"NOT logic"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"NOT (!)")),": The NOT operator is used to negate a condition. It returns true if the condition is false and returns false if the condition is true. Here's an example:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20const%20isLoggedOut%20%3D%20false%3B%5Cn%5Cn%20%20%20if%20(!isLoggedOut)%20%7B%5Cn%20%20%20%20%20return%20%3CText%3E%20Welcome%20back!%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20return%20%3CText%3E%20Please%20log%20in%20to%20continue.%20%3C%2FText%3E%3B%5Cn%20%20%20%7D%5Cn%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"In this code, we're checking if the isLoggedOut variable is NOT true. If it's NOT true (i.e., if it's false), we print \"Welcome back!\"."),(0,n.kt)("p",null,"AND, OR, and NOT are some basic logical operators, but they are foundational to writing more complex code with conditional statements."),(0,n.kt)("h3",c({},{id:"loop"}),"Loop"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Loops"))," are a way to repeat a block of code multiple times. There are two types of loops commonly used in programming: the ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"for"))," loop and the ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"while"))," loop."),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"for"))," loop is used when you know exactly how many times you want to run the loop, or a variable knows how many times to run the loop. Here's the basic syntax of a for loop:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"for (let i = 0; i < 5; i++) {\n  // Do something\n}\n")),(0,n.kt)("p",null,"In this example, the loop will run 5 times because the condition i < 5 is true for the first 5 values of i. The loop starts with i being 0, and then increments i by 1 after each iteration."),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"while"))," loop is used when you don't know how many times you want to run the loop, but you know the condition under which you want to stop. Here's the basic syntax of a while loop:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"let i = 0;\n\nwhile (i < 5) {\n  // Do something\n  i++;\n}\n")),(0,n.kt)("p",null,"In this example, the loop will run as long as i is less than 5. The loop starts with i being 0, and then increments i by 1 after each iteration."),(0,n.kt)("p",null,"It's important to make sure that the condition in a while loop will eventually become false, otherwise the loop will run forever (also known as an ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"infinite loop")),")."),(0,n.kt)("h4",c({},{id:"example-1"}),"Example 1"),(0,n.kt)("p",null,"In this example, we're using a while loop to print the even numbers from 0 to 10:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20even_numbers%20%3D%20%5B%5D%3B%5Cn%5Cn%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%3D%2010%3B%20i%20%2B%3D%202)%20%7B%5Cn%20%20%20%20%20even_numbers.push(i)%3B%5Cn%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%3CText%3E%20%7Beven_numbers%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"You can try to edit the code above to print the odd numbers from 0 to 10."),(0,n.kt)("h4",c({},{id:"example-2"}),"Example 2"),(0,n.kt)("p",null,"In this example, we're using a while loop to print the sum of numbers from 0 to 10:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20sum%20%3D%200%3B%5Cn%5Cn%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%3D%2010%3B%20i%20%2B%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20sum%20%2B%3D%20i%3B%5Cn%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%3CText%3E%20%7Bsum%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"You can try to edit the code above to calculate the sum of even numbers from 0 to 10."),(0,n.kt)("h4",c({},{id:"example-3"}),"Example 3"),(0,n.kt)("p",null,"In this example, we're using a for loop to print the first 10 Fibonacci numbers:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20fibonacci%20%3D%20%5B0%5D%3B%5Cn%20%20%20a%20%3D%200%3B%5Cn%20%20%20b%20%3D%201%3B%5Cn%5Cn%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%3D%2010%3B%20i%20%2B%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20c%20%3D%20a%20%2B%20b%3B%5Cn%20%20%20%20%20%20%20%20fibonacci.push(c)%3B%5Cn%20%20%20%20%20%20%20%20a%20%3D%20b%3B%5Cn%20%20%20%20%20%20%20%20b%20%3D%20c%3B%5Cn%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%3CText%3E%20%7Bfibonacci.join(%5C%22%20%5C%22)%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"You might notice that we put ",(0,n.kt)("inlineCode",{parentName:"p"},'.join(" ")')," at the end of the ",(0,n.kt)("inlineCode",{parentName:"p"},"fibonacci")," variable. This is because the ",(0,n.kt)("inlineCode",{parentName:"p"},"fibonacci")," variable is an array, and we want to print it as a string. The ",(0,n.kt)("inlineCode",{parentName:"p"},'.join(" ")')," method joins all the elements in the array with a space in between."),(0,n.kt)("h4",c({},{id:"example-4"}),"Example 4"),(0,n.kt)("p",null,"Now, let's try to print the first 10 Fibonacci numbers using a while loop:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20fibonacci%20%3D%20%5B0%5D%3B%5Cn%20%20%20a%20%3D%200%3B%5Cn%20%20%20b%20%3D%201%3B%5Cn%20%20%20c%20%3D%200%3B%5Cn%5Cn%20%20%20while%20(b%20%3C%3D%20100)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20c%20%3D%20a%20%2B%20b%3B%5Cn%20%20%20%20%20%20%20%20fibonacci.push(c)%3B%5Cn%20%20%20%20%20%20%20%20a%20%3D%20b%3B%5Cn%20%20%20%20%20%20%20%20b%20%3D%20c%3B%5Cn%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%3CText%3E%20%7Bfibonacci.join(%5C%22%20%5C%22)%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"In each of these examples, the while loop will continue executing the code within its block as long as the specified condition is true. Compared with the ",(0,n.kt)("inlineCode",{parentName:"p"},"for")," loop example, now, we stop the loop when the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"b")," is greater than 100."),(0,n.kt)("h3",c({},{id:"function"}),"Function"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Function"))," is a way to organize code and make it more reusable. A function is a piece of code that you can reuse over and over again. Think of it like a recipe for making your favorite dish. Just like you follow the steps of a recipe to create a delicious meal, you can create a function to perform a specific task in your code."),(0,n.kt)("p",null,"Functions have a name, which you choose, and a set of instructions that you write inside of curly braces {}. You can also give a function some inputs, called parameters, and it will perform the instructions with those inputs."),(0,n.kt)("p",null,"Here's an example of a function that adds two numbers together:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"function addNumbers(num1, num2) {\n  sum = num1 + num2;\n  return sum;\n}\n")),(0,n.kt)("p",null,"n this function, we've given it the name addNumbers. We've also given it two parameters, num1 and num2, which are the numbers we want to add together. Inside the function, we've added those two numbers together and stored the result in a variable called sum. Finally, we've used the return keyword to send the value of sum back to the code that called the function."),(0,n.kt)("p",null,"To use this function in our code, we would call it like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"result = addNumbers(5, 7);\n")),(0,n.kt)("p",null,"In this example, we're passing the values 5 and 7 as arguments to the ",(0,n.kt)("inlineCode",{parentName:"p"},"addNumbers")," function. The function will perform the instructions inside the curly braces using those inputs, and then return the value of 12, which we've stored in the ",(0,n.kt)("inlineCode",{parentName:"p"},"result")," variable."),(0,n.kt)("p",null,"In our examples above, you have actually already been using functions. Indeed, we use another form of function definition called ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"arrow function")),"."),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-tsx"}),"const helloworld = () => {\n  // Do something\n  return <Text> Helloworld! </Text>;\n};\n\nexport default helloworld;\n")),(0,n.kt)("p",null,"In this example, use a constant variable ",(0,n.kt)("inlineCode",{parentName:"p"},"helloworld")," to store the function. Yes! You can store a function in a variable. We use ",(0,n.kt)("inlineCode",{parentName:"p"},"= ()")," to signal that we are defining a function."),(0,n.kt)("p",null,"The function is defined by the arrow ",(0,n.kt)("inlineCode",{parentName:"p"},"=>")," and the curly braces ",(0,n.kt)("inlineCode",{parentName:"p"},"{}")," that contain the code to be executed. The function returns the text ",(0,n.kt)("inlineCode",{parentName:"p"},"Helloworld!")," to the code that called the function."),(0,n.kt)("p",null,"Eventually, we tell the IDE that we want to export the function by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"export default")," keyword, so that the IDE executes the function when we run the code."),(0,n.kt)("p",null,"The code below is a simple example of a function that prints the product of two numbers:"),(0,n.kt)("div",c({},{className:"snack-player","data-snack-name":"Helloworld","data-snack-description":"Example usage","data-snack-files":"%7B%22App.tsx%22%3A%7B%22type%22%3A%22CODE%22%2C%22contents%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7BText%7D%20from%20'react-native'%3B%5Cn%5Cnconst%20helloworld%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20function%20addNumbers(num1%2C%20num2)%20%7B%5Cn%20%20%20%20%20sum%20%3D%20num1%20%2B%20num2%3B%5Cn%20%20%20%20%20return%20sum%3B%5Cn%20%20%20%7D%5Cn%20%20%20result%20%3D%20addNumbers(5%2C%207)%3B%5Cn%20%20%20return%20%3CText%3E%20%7Bresult%7D%20%3C%2FText%3E%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20helloworld%3B%22%7D%7D","data-snack-dependencies":"","data-snack-platform":"web","data-snack-supported-platforms":"ios,android,web","data-snack-theme":"light","data-snack-preview":"true","data-snack-loading":"lazy"})),(0,n.kt)("p",null,"Try to edit this code to print the product of two numbers."))}y.isMDXComponent=!0}}]);